


╔═╦══════════════════╦═╗
║ ║                  ║ ║
╠═╬══════════════════╬═╣
║ ║   F5 Device ID   ║ ║
╠═╬══════════════════╬═╣
║ ║                  ║ ║
╚═╩══════════════════╩═╝

╔═══════════════════╗
║   General Notes   ║
╚═══════════════════╝

Note that Device ID's JavaScript is attached to HTML's <head> tag.
In the case that the Service's page does NOT have <head> tag, Device ID will not work.
Service's page will still work as usual without the Device ID.



╔═══════════════════════════╗
║   Create the Components   ║
╚═══════════════════════════╝

tmsh create ltm html-rule tag-append-html /Common/DeviceID_ShapeJSRule { action { text "<script id=\"_imp_apg_dip_\"  imp_apg_cid=\"f5cs-samplesample-xsamplex\" type=\"text/javascript\" src=\"/__imp_apg__/js/f5cs-samplesample-xsamplex.js\" async ></script>" } description "HTML-Rule DeviceID ShapeJSRule Description" match { attribute-name none attribute-value none tag-name head } }
tmsh create ltm profile html /Common/DeviceID_ShapeJSHTML { app-service none content-detection disabled content-selection replace-all-with { text/html text/xhtml } defaults-from html description "HTML DeviceID ShapeJSHTML Description" rules replace-all-with { DeviceID_ShapeJSRule } }
tmsh create ltm profile one-connect /Common/DeviceID_OneConnect { defaults-from oneconnect description "DeviceID OneConnect Description" idle-timeout-override disabled limit-type none max-age 86400 max-reuse 1000 max-size 10000 share-pools disabled source-mask 255.255.255.255 }
tmsh create ltm data-group internal /Common/DeviceID_ShapeJS { description "DeviceID ShapeJS Data-Group Description" records replace-all-with { \"/__imp_apg__/js/f5cs-samplesample-xsamplex.js\" { data \"\" } } type string }
tmsh create ltm data-group internal /Common/DeviceID_SafeJSAPIEP { description "DeviceID ShapeJS API EP Data-Group Description" records replace-all-with { \"/__imp_apg__/api/\" { data \"\" } } type string }
tmsh create ltm profile server-ssl /Common/DeviceID_ServerSSL { alert-timeout indefinite allow-expired-crl disabled authenticate once authenticate-depth 9 authenticate-name none bypass-on-client-cert-fail disabled bypass-on-handshake-alert disabled c3d-ca-cert none c3d-ca-key none c3d-ca-passphrase none c3d-cert-extension-custom-oids none c3d-cert-extension-includes { basic-constraints extended-key-usage key-usage subject-alternative-name } c3d-cert-lifespan 24 ca-file none cache-size 262144 cache-timeout 3600 cert none chain none cipher-group none ciphers DEFAULT crl none crl-file none data-0rtt disabled defaults-from serverssl description "DeviceID Server-SSL Description" expire-cert-response-control drop generic-alert enabled handshake-timeout 10 key none max-active-handshakes indefinite mod-ssl-methods disabled mode enabled ocsp none options { dont-insert-empty-fragments no-tlsv1.3 } passphrase none peer-cert-mode ignore proxy-ssl disabled proxy-ssl-passthrough disabled renegotiate-period indefinite renegotiate-size indefinite renegotiation enabled retain-certificate true secure-renegotiation require-strict server-name dip.zeronaught.com session-mirroring disabled session-ticket disabled sni-default false sni-require false ssl-c3d disabled ssl-forward-proxy disabled ssl-forward-proxy-bypass disabled ssl-forward-proxy-verified-handshake disabled ssl-sign-hash any strict-resume disabled unclean-shutdown enabled untrusted-cert-response-control drop }
tmsh create ltm persistence cookie /Common/DeviceID_PersistenceCookie { always-send disabled cookie-encryption disabled cookie-encryption-passphrase none cookie-name none defaults-from cookie description "DeviceID PersistenceCookie Description" encrypt-cookie-poolname disabled expiration 0 hash-length 0 hash-offset 0 httponly enabled match-across-pools disabled match-across-services disabled match-across-virtuals disabled method insert mirror disabled override-connection-limit disabled secure enabled timeout 180 }
tmsh create ltm pool /Common/DeviceID_ShapePool { allow-nat yes allow-snat yes autoscale-group-id none description "DeviceID ShapePool Description" gateway-failsafe-device none ignore-persisted-weight disabled ip-tos-to-client pass-through ip-tos-to-server pass-through link-qos-to-client pass-through link-qos-to-server pass-through load-balancing-mode round-robin members replace-all-with { /Common/dip.zeronaught.com:443 { address any6 connection-limit 0 description "DeviceID Node dip.zeronaught.com Description" dynamic-ratio 1 inherit-profile enabled logging disabled monitor default priority-group 0 rate-limit disabled ratio 1 session user-enabled fqdn { autopopulate enabled name dip.zeronaught.com } metadata none profiles none } } metadata none min-active-members 0 min-up-members 0 min-up-members-action failover min-up-members-checking disabled monitor none profiles none queue-depth-limit 0 queue-on-connection-limit disabled queue-time-limit 0 reselect-tries 0 service-down-action none slow-ramp-time 10 }
tmsh create ltm virtual /Common/DeviceID_ShapeSSLVS { address-status yes app-cloud-security-services none auth none auto-discovery disabled auto-lasthop default bwc-policy none clone-pools none cmp-enabled yes connection-limit 0 description "DeviceID ServerSide SSL VS Description" destination 1.2.3.4:443 enabled ephemeral-auth-access-config none eviction-protected disabled fallback-persistence none flow-eviction-policy none fw-enforced-policy none fw-staged-policy none gtm-score 0 ip-intelligence-policy none ip-protocol tcp last-hop-pool none mask 255.255.255.255 metadata none mirror disabled mobile-app-tunnel disabled nat64 disabled parent-name none per-flow-request-access-policy none persist none policies none pool DeviceID_ShapePool profiles replace-all-with { DeviceID_OneConnect { context all } DeviceID_ServerSSL { context serverside } HTTP_Profile { context all } TCP_Profile { context all } } rate-class none rate-limit disabled rate-limit-dst-mask 0 rate-limit-mode object rate-limit-src-mask 0 related-rules none rules none security-log-profiles none security-nat-policy { policy none use-device-policy no use-route-domain-policy no } serverssl-use-sni disabled service-down-immediate-action none service-policy none source 0.0.0.0/0 source-address-translation { pool none type automap } source-port preserve throughput-capacity infinite traffic-classes none traffic-matching-criteria none translate-address enabled translate-port enabled transparent-nexthop none urldb-feed-policy none vlans none vlans-disabled }
tmsh create ltm rule /Common/DeviceID_ShapeiRule `echo "priority 1000 ; proc request_js { shape_pool http_path shape_debug } { ;  set shape_ssl_vs_name /Common/DeviceID_ShapeSSLVS ;  if { \\$shape_debug } { log local0. \\"[IP::client_addr]:[TCP::client_port]: Got JS request: \\${http_path}\\" } ;  if { [active_members \\${shape_pool}] >= 1 } { ;   snat automap ;   persist none ;   virtual \\$shape_ssl_vs_name ;   if { \\$shape_debug } { log local0. \\"Successfully routed to \\$shape_ssl_vs_name\\" } ;   return 0 ;  } else { ;   if { \\$shape_debug } { log local0. \\"[IP::client_addr]:[TCP::client_port]: ShapeJS URI, but \\${shape_pool} pool is down. Sent HTTP 200 response\\" } ;   HTTP::respond 200 noserver Cache-Control \\"no-cache\\" ;   return 1 ;  } ; } ; when CLIENT_ACCEPTED { ;  set shape_debug 1 ;  set safe_domain \\"dip.zeronaught.com\\" ;  set JS_DG /Common/DeviceID_ShapeJS ;  set shape_pool /Common/DeviceID_ShapePool ;  set rewrite_xff 1 ; } ; when HTTP_REQUEST { ;  set bypass 0 ;  set http_path [string tolower [HTTP::path -normalized]] ;  if { not ( \\${http_path} equals \\"/\\" ) } { set http_path [string trimright \\${http_path} \\"/\\"] } ;  set js_path [HTTP::path -normalized] ;  if { [class match [string tolower \\$js_path] starts_with /Common/DeviceID_SafeJSAPIEP] || ( [HTTP::method] eq \\"GET\\" && [class match \\$js_path equals \\$JS_DG] ) } { ;   set bypass 1 ;   HTTP::host \\$safe_domain ;   if { [call request_js \\$shape_pool \\${http_path} \\$shape_debug] } { ;    return ;   } ;  } else { ;   return ;  } ;  if { \\$rewrite_xff && not ( \\$bypass ) } { ;   HTTP::header insert X-Forwarded-For [IP::client_addr] ;  } ; } ; when HTTP_RESPONSE { ;  if { ( [info exists bypass] && \\$bypass ) } { ;   HTML::disable ;  } ; }"`
tmsh create ltm rule /Common/HTTP_Log `echo "when CLIENT_ACCEPTED { ;  log local0.debug \\"Route Domain [ROUTE::domain] Traffic Group [traffic_group] Virtual Name [virtual name] Time [clock format [clock seconds] -format \\"%Y-%m-%d %H:%M:%S\\"] IP Local_Addr [IP::local_addr] Remote_Addr [IP::remote_addr] Client_Addr [IP::client_addr] Protocol [IP::protocol] Hops [IP::hops] Idle_Timeout [IP::idle_timeout] Stats [IP::stats] TOS [IP::tos] TTL [IP::ttl] Version [IP::version]\\" ; } ; when HTTP_REQUEST { ;  log local0. \\"\\\[HTTP::request\\\] [HTTP::request]\\" ;  log local0. \\"\\\[HTTP::header names\\\] [HTTP::header names]\\" ;  foreach header_member [HTTP::header names] { ;   log local0. \\"\\\[HTTP::header values \\$header_member\\\] [HTTP::header values \\$header_member]\\" ;  } ; } ; when SERVER_CONNECTED { ;  log local0.debug \\"Route Domain [ROUTE::domain] Traffic Group [traffic_group] Virtual Name [virtual name] Time [clock format [clock seconds] -format \\"%Y-%m-%d %H:%M:%S\\"] IP Local_Addr [IP::local_addr] Remote_Addr [IP::remote_addr] Client_Addr [IP::client_addr] Server_Addr [IP::server_addr] Protocol [IP::protocol] Hops [IP::hops] Idle_Timeout [IP::idle_timeout] Stats [IP::stats] TOS [IP::tos] TTL [IP::ttl] Version [IP::version]\\" ; } ; when HTTP_REQUEST_SEND { ;  log local0. \\"\\\[HTTP::request\\\] [HTTP::request]\\" ;  log local0. \\"\\\[HTTP::header names\\\] [HTTP::header names]\\" ;  foreach header_member [HTTP::header names] { ;   log local0. \\"\\\[HTTP::header values \\$header_member\\\] [HTTP::header values \\$header_member]\\" ;  } ; } ; when HTTP_REQUEST_RELEASE { ;  log local0. \\"\\\[HTTP::request\\\] [HTTP::request]\\" ;  log local0. \\"\\\[HTTP::header names\\\] [HTTP::header names]\\" ;  foreach header_member [HTTP::header names] { ;   log local0. \\"\\\[HTTP::header values \\$header_member\\\] [HTTP::header values \\$header_member]\\" ;  } ; } ; when HTTP_REJECT { ;  log local0. \\"HTTP_REJECT: [HTTP::reject_reason as_num] [HTTP::reject_reason]\\" ; } ; when HTTP_RESPONSE { ;  log local0. \\"\\\[HTTP::status\\\] [HTTP::status]\\" ;  log local0. \\"\\\[HTTP::header names\\\] [HTTP::header names]\\" ;  foreach header_member [HTTP::header names] { ;   log local0. \\"\\\[HTTP::header values \\$header_member\\\] [HTTP::header values \\$header_member]\\" ;  } ; }"`



╔═════════════════════════════════════════╗
║   Modify the Services' Virtual Server   ║
╚═════════════════════════════════════════╝

tmsh modify ltm virtual /Common/DVWA_Service_HTTPS                { profiles add { /Common/DeviceID_ShapeJSHTML /Common/DeviceID_OneConnect } rules { /Common/HTTP_Log /Common/DeviceID_ShapeiRule } }
tmsh modify ltm virtual /Common/serviceMain                       { profiles add { /Common/DeviceID_ShapeJSHTML /Common/DeviceID_OneConnect } rules { /Common/HTTP_Log /Common/DeviceID_ShapeiRule } }
tmsh modify ltm virtual /Common/StaticWeb_Service_HTTPS           { profiles add { /Common/DeviceID_ShapeJSHTML /Common/DeviceID_OneConnect } rules { /Common/HTTP_Log /Common/DeviceID_ShapeiRule } }
tmsh modify ltm virtual /Common/Hackazon_Service_HTTPS            { profiles add { /Common/DeviceID_ShapeJSHTML /Common/DeviceID_OneConnect } rules { /Common/HTTP_Log /Common/DeviceID_ShapeiRule } }
tmsh modify ltm virtual /Common/DVWA_Service_HTTPS-Redirect-      { profiles add { /Common/DeviceID_ShapeJSHTML /Common/DeviceID_OneConnect } rules { /Common/HTTP_Log /Common/DeviceID_ShapeiRule _sys_https_redirect } }
tmsh modify ltm virtual /Common/serviceMain-Redirect-             { profiles add { /Common/DeviceID_ShapeJSHTML /Common/DeviceID_OneConnect } rules { /Common/HTTP_Log /Common/DeviceID_ShapeiRule _sys_https_redirect } }
tmsh modify ltm virtual /Common/StaticWeb_Service_HTTPS-Redirect- { profiles add { /Common/DeviceID_ShapeJSHTML /Common/DeviceID_OneConnect } rules { /Common/HTTP_Log /Common/DeviceID_ShapeiRule _sys_https_redirect } }
tmsh modify ltm virtual /Common/Hackazon_Service_HTTPS-Redirect-  { profiles add { /Common/DeviceID_ShapeJSHTML /Common/DeviceID_OneConnect } rules { /Common/HTTP_Log /Common/DeviceID_ShapeiRule _sys_https_redirect } }



╔══════════════════════════════════════╗
║   Remove Device ID's Configuration   ║
╚══════════════════════════════════════╝

Device ID will take effect when the Service's Virtual Server were modified to deploy also the Device ID profiles and iRule.
So removing Device ID profiles and iRule from the Service's Virtual Server will effectively deactivating the Device ID feature.

To completely removing the Device ID configurations, delete the Device ID components as below:

tmsh delete ltm profile html /Common/DeviceID_ShapeJSHTML
tmsh delete ltm html-rule tag-append-html /Common/DeviceID_ShapeJSRule
tmsh delete ltm profile one-connect /Common/DeviceID_OneConnect
tmsh delete ltm data-group internal /Common/DeviceID_ShapeJS
tmsh delete ltm profile server-ssl /Common/DeviceID_ServerSSL
tmsh delete ltm persistence cookie /Common/DeviceID_PersistenceCookie
tmsh delete ltm pool /Common/DeviceID_ShapePool
tmsh delete ltm node /Common/dip.zeronaught.com
tmsh delete ltm rule /Common/DeviceID_ShapeiRule



╔═╦═════════════════╦═╗
║ ║                 ║ ║
╠═╬═════════════════╬═╣
║ ║ End of Document ║ ║
╠═╬═════════════════╬═╣
║ ║                 ║ ║
╚═╩═════════════════╩═╝


